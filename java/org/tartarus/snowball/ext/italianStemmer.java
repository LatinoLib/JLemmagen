// This file was generated automatically by the Snowball to Java compiler

package org.tartarus.snowball.ext;

import org.tartarus.snowball.MyAmong;

 /**
  * This class was automatically generated by a Snowball to Java compiler 
  * It implements the stemming algorithm defined by a snowball script.
  */

public class italianStemmer extends org.tartarus.snowball.SnowballStemmer {

private static final long serialVersionUID = 1L;

        //private final static italianStemmer methodObject = new italianStemmer ();

                private final static MyAmong a_0[] = {
                    new MyAmong ( "", -1, 7 ),
                    new MyAmong ( "qu", 0, 6 ),
                    new MyAmong ( "\u00E1", 0, 1 ),
                    new MyAmong ( "\u00E9", 0, 2 ),
                    new MyAmong ( "\u00ED", 0, 3 ),
                    new MyAmong ( "\u00F3", 0, 4 ),
                    new MyAmong ( "\u00FA", 0, 5 )
                };

                private final static MyAmong a_1[] = {
                    new MyAmong ( "", -1, 3 ),
                    new MyAmong ( "I", 0, 1 ),
                    new MyAmong ( "U", 0, 2 )
                };

                private final static MyAmong a_2[] = {
                    new MyAmong ( "la", -1, -1 ),
                    new MyAmong ( "cela", 0, -1 ),
                    new MyAmong ( "gliela", 0, -1 ),
                    new MyAmong ( "mela", 0, -1 ),
                    new MyAmong ( "tela", 0, -1 ),
                    new MyAmong ( "vela", 0, -1 ),
                    new MyAmong ( "le", -1, -1 ),
                    new MyAmong ( "cele", 6, -1 ),
                    new MyAmong ( "gliele", 6, -1 ),
                    new MyAmong ( "mele", 6, -1 ),
                    new MyAmong ( "tele", 6, -1 ),
                    new MyAmong ( "vele", 6, -1 ),
                    new MyAmong ( "ne", -1, -1 ),
                    new MyAmong ( "cene", 12, -1 ),
                    new MyAmong ( "gliene", 12, -1 ),
                    new MyAmong ( "mene", 12, -1 ),
                    new MyAmong ( "sene", 12, -1 ),
                    new MyAmong ( "tene", 12, -1 ),
                    new MyAmong ( "vene", 12, -1 ),
                    new MyAmong ( "ci", -1, -1 ),
                    new MyAmong ( "li", -1, -1 ),
                    new MyAmong ( "celi", 20, -1 ),
                    new MyAmong ( "glieli", 20, -1 ),
                    new MyAmong ( "meli", 20, -1 ),
                    new MyAmong ( "teli", 20, -1 ),
                    new MyAmong ( "veli", 20, -1 ),
                    new MyAmong ( "gli", 20, -1 ),
                    new MyAmong ( "mi", -1, -1 ),
                    new MyAmong ( "si", -1, -1 ),
                    new MyAmong ( "ti", -1, -1 ),
                    new MyAmong ( "vi", -1, -1 ),
                    new MyAmong ( "lo", -1, -1 ),
                    new MyAmong ( "celo", 31, -1 ),
                    new MyAmong ( "glielo", 31, -1 ),
                    new MyAmong ( "melo", 31, -1 ),
                    new MyAmong ( "telo", 31, -1 ),
                    new MyAmong ( "velo", 31, -1 )
                };

                private final static MyAmong a_3[] = {
                    new MyAmong ( "ando", -1, 1 ),
                    new MyAmong ( "endo", -1, 1 ),
                    new MyAmong ( "ar", -1, 2 ),
                    new MyAmong ( "er", -1, 2 ),
                    new MyAmong ( "ir", -1, 2 )
                };

                private final static MyAmong a_4[] = {
                    new MyAmong ( "ic", -1, -1 ),
                    new MyAmong ( "abil", -1, -1 ),
                    new MyAmong ( "os", -1, -1 ),
                    new MyAmong ( "iv", -1, 1 )
                };

                private final static MyAmong a_5[] = {
                    new MyAmong ( "ic", -1, 1 ),
                    new MyAmong ( "abil", -1, 1 ),
                    new MyAmong ( "iv", -1, 1 )
                };

                private final static MyAmong a_6[] = {
                    new MyAmong ( "ica", -1, 1 ),
                    new MyAmong ( "logia", -1, 3 ),
                    new MyAmong ( "osa", -1, 1 ),
                    new MyAmong ( "ista", -1, 1 ),
                    new MyAmong ( "iva", -1, 9 ),
                    new MyAmong ( "anza", -1, 1 ),
                    new MyAmong ( "enza", -1, 5 ),
                    new MyAmong ( "ice", -1, 1 ),
                    new MyAmong ( "atrice", 7, 1 ),
                    new MyAmong ( "iche", -1, 1 ),
                    new MyAmong ( "logie", -1, 3 ),
                    new MyAmong ( "abile", -1, 1 ),
                    new MyAmong ( "ibile", -1, 1 ),
                    new MyAmong ( "usione", -1, 4 ),
                    new MyAmong ( "azione", -1, 2 ),
                    new MyAmong ( "uzione", -1, 4 ),
                    new MyAmong ( "atore", -1, 2 ),
                    new MyAmong ( "ose", -1, 1 ),
                    new MyAmong ( "ante", -1, 1 ),
                    new MyAmong ( "mente", -1, 1 ),
                    new MyAmong ( "amente", 19, 7 ),
                    new MyAmong ( "iste", -1, 1 ),
                    new MyAmong ( "ive", -1, 9 ),
                    new MyAmong ( "anze", -1, 1 ),
                    new MyAmong ( "enze", -1, 5 ),
                    new MyAmong ( "ici", -1, 1 ),
                    new MyAmong ( "atrici", 25, 1 ),
                    new MyAmong ( "ichi", -1, 1 ),
                    new MyAmong ( "abili", -1, 1 ),
                    new MyAmong ( "ibili", -1, 1 ),
                    new MyAmong ( "ismi", -1, 1 ),
                    new MyAmong ( "usioni", -1, 4 ),
                    new MyAmong ( "azioni", -1, 2 ),
                    new MyAmong ( "uzioni", -1, 4 ),
                    new MyAmong ( "atori", -1, 2 ),
                    new MyAmong ( "osi", -1, 1 ),
                    new MyAmong ( "anti", -1, 1 ),
                    new MyAmong ( "amenti", -1, 6 ),
                    new MyAmong ( "imenti", -1, 6 ),
                    new MyAmong ( "isti", -1, 1 ),
                    new MyAmong ( "ivi", -1, 9 ),
                    new MyAmong ( "ico", -1, 1 ),
                    new MyAmong ( "ismo", -1, 1 ),
                    new MyAmong ( "oso", -1, 1 ),
                    new MyAmong ( "amento", -1, 6 ),
                    new MyAmong ( "imento", -1, 6 ),
                    new MyAmong ( "ivo", -1, 9 ),
                    new MyAmong ( "it\u00E0", -1, 8 ),
                    new MyAmong ( "ist\u00E0", -1, 1 ),
                    new MyAmong ( "ist\u00E8", -1, 1 ),
                    new MyAmong ( "ist\u00EC", -1, 1 )
                };

                private final static MyAmong a_7[] = {
                    new MyAmong ( "isca", -1, 1 ),
                    new MyAmong ( "enda", -1, 1 ),
                    new MyAmong ( "ata", -1, 1 ),
                    new MyAmong ( "ita", -1, 1 ),
                    new MyAmong ( "uta", -1, 1 ),
                    new MyAmong ( "ava", -1, 1 ),
                    new MyAmong ( "eva", -1, 1 ),
                    new MyAmong ( "iva", -1, 1 ),
                    new MyAmong ( "erebbe", -1, 1 ),
                    new MyAmong ( "irebbe", -1, 1 ),
                    new MyAmong ( "isce", -1, 1 ),
                    new MyAmong ( "ende", -1, 1 ),
                    new MyAmong ( "are", -1, 1 ),
                    new MyAmong ( "ere", -1, 1 ),
                    new MyAmong ( "ire", -1, 1 ),
                    new MyAmong ( "asse", -1, 1 ),
                    new MyAmong ( "ate", -1, 1 ),
                    new MyAmong ( "avate", 16, 1 ),
                    new MyAmong ( "evate", 16, 1 ),
                    new MyAmong ( "ivate", 16, 1 ),
                    new MyAmong ( "ete", -1, 1 ),
                    new MyAmong ( "erete", 20, 1 ),
                    new MyAmong ( "irete", 20, 1 ),
                    new MyAmong ( "ite", -1, 1 ),
                    new MyAmong ( "ereste", -1, 1 ),
                    new MyAmong ( "ireste", -1, 1 ),
                    new MyAmong ( "ute", -1, 1 ),
                    new MyAmong ( "erai", -1, 1 ),
                    new MyAmong ( "irai", -1, 1 ),
                    new MyAmong ( "isci", -1, 1 ),
                    new MyAmong ( "endi", -1, 1 ),
                    new MyAmong ( "erei", -1, 1 ),
                    new MyAmong ( "irei", -1, 1 ),
                    new MyAmong ( "assi", -1, 1 ),
                    new MyAmong ( "ati", -1, 1 ),
                    new MyAmong ( "iti", -1, 1 ),
                    new MyAmong ( "eresti", -1, 1 ),
                    new MyAmong ( "iresti", -1, 1 ),
                    new MyAmong ( "uti", -1, 1 ),
                    new MyAmong ( "avi", -1, 1 ),
                    new MyAmong ( "evi", -1, 1 ),
                    new MyAmong ( "ivi", -1, 1 ),
                    new MyAmong ( "isco", -1, 1 ),
                    new MyAmong ( "ando", -1, 1 ),
                    new MyAmong ( "endo", -1, 1 ),
                    new MyAmong ( "Yamo", -1, 1 ),
                    new MyAmong ( "iamo", -1, 1 ),
                    new MyAmong ( "avamo", -1, 1 ),
                    new MyAmong ( "evamo", -1, 1 ),
                    new MyAmong ( "ivamo", -1, 1 ),
                    new MyAmong ( "eremo", -1, 1 ),
                    new MyAmong ( "iremo", -1, 1 ),
                    new MyAmong ( "assimo", -1, 1 ),
                    new MyAmong ( "ammo", -1, 1 ),
                    new MyAmong ( "emmo", -1, 1 ),
                    new MyAmong ( "eremmo", 54, 1 ),
                    new MyAmong ( "iremmo", 54, 1 ),
                    new MyAmong ( "immo", -1, 1 ),
                    new MyAmong ( "ano", -1, 1 ),
                    new MyAmong ( "iscano", 58, 1 ),
                    new MyAmong ( "avano", 58, 1 ),
                    new MyAmong ( "evano", 58, 1 ),
                    new MyAmong ( "ivano", 58, 1 ),
                    new MyAmong ( "eranno", -1, 1 ),
                    new MyAmong ( "iranno", -1, 1 ),
                    new MyAmong ( "ono", -1, 1 ),
                    new MyAmong ( "iscono", 65, 1 ),
                    new MyAmong ( "arono", 65, 1 ),
                    new MyAmong ( "erono", 65, 1 ),
                    new MyAmong ( "irono", 65, 1 ),
                    new MyAmong ( "erebbero", -1, 1 ),
                    new MyAmong ( "irebbero", -1, 1 ),
                    new MyAmong ( "assero", -1, 1 ),
                    new MyAmong ( "essero", -1, 1 ),
                    new MyAmong ( "issero", -1, 1 ),
                    new MyAmong ( "ato", -1, 1 ),
                    new MyAmong ( "ito", -1, 1 ),
                    new MyAmong ( "uto", -1, 1 ),
                    new MyAmong ( "avo", -1, 1 ),
                    new MyAmong ( "evo", -1, 1 ),
                    new MyAmong ( "ivo", -1, 1 ),
                    new MyAmong ( "ar", -1, 1 ),
                    new MyAmong ( "ir", -1, 1 ),
                    new MyAmong ( "er\u00E0", -1, 1 ),
                    new MyAmong ( "ir\u00E0", -1, 1 ),
                    new MyAmong ( "er\u00F2", -1, 1 ),
                    new MyAmong ( "ir\u00F2", -1, 1 )
                };

                private static final char g_v[] = {17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 8, 2, 1 };

                private static final char g_AEIO[] = {17, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 8, 2 };

                private static final char g_CG[] = {17 };

        private int I_p2;
        private int I_p1;
        private int I_pV;

                private void copy_from(italianStemmer other) {
                    I_p2 = other.I_p2;
                    I_p1 = other.I_p1;
                    I_pV = other.I_pV;
                    super.copy_from(other);
                }

                private boolean r_prelude() {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
                    // (, line 34
                    // test, line 35
                    v_1 = cursor;
                    // repeat, line 35
                    replab0: while(true)
                    {
                        v_2 = cursor;
                        lab1: do {
                            // (, line 35
                            // [, line 36
                            bra = cursor;
                            // substring, line 36
                            among_var = find_among(a_0, 7);
                            if (among_var == 0)
                            {
                                break lab1;
                            }
                            // ], line 36
                            ket = cursor;
                            switch(among_var) {
                                case 0:
                                    break lab1;
                                case 1:
                                    // (, line 37
                                    // <-, line 37
                                    slice_from("\u00E0");
                                    break;
                                case 2:
                                    // (, line 38
                                    // <-, line 38
                                    slice_from("\u00E8");
                                    break;
                                case 3:
                                    // (, line 39
                                    // <-, line 39
                                    slice_from("\u00EC");
                                    break;
                                case 4:
                                    // (, line 40
                                    // <-, line 40
                                    slice_from("\u00F2");
                                    break;
                                case 5:
                                    // (, line 41
                                    // <-, line 41
                                    slice_from("\u00F9");
                                    break;
                                case 6:
                                    // (, line 42
                                    // <-, line 42
                                    slice_from("qU");
                                    break;
                                case 7:
                                    // (, line 43
                                    // next, line 43
                                    if (cursor >= limit)
                                    {
                                        break lab1;
                                    }
                                    cursor++;
                                    break;
                            }
                            continue replab0;
                        } while (false);
                        cursor = v_2;
                        break replab0;
                    }
                    cursor = v_1;
                    // repeat, line 46
                    replab2: while(true)
                    {
                        v_3 = cursor;
                        lab3: do {
                            // goto, line 46
                            golab4: while(true)
                            {
                                v_4 = cursor;
                                lab5: do {
                                    // (, line 46
                                    if (!(in_grouping(g_v, 97, 249)))
                                    {
                                        break lab5;
                                    }
                                    // [, line 47
                                    bra = cursor;
                                    // or, line 47
                                    lab6: do {
                                        v_5 = cursor;
                                        lab7: do {
                                            // (, line 47
                                            // literal, line 47
                                            if (!(eq_s(1, "u")))
                                            {
                                                break lab7;
                                            }
                                            // ], line 47
                                            ket = cursor;
                                            if (!(in_grouping(g_v, 97, 249)))
                                            {
                                                break lab7;
                                            }
                                            // <-, line 47
                                            slice_from("U");
                                            break lab6;
                                        } while (false);
                                        cursor = v_5;
                                        // (, line 48
                                        // literal, line 48
                                        if (!(eq_s(1, "i")))
                                        {
                                            break lab5;
                                        }
                                        // ], line 48
                                        ket = cursor;
                                        if (!(in_grouping(g_v, 97, 249)))
                                        {
                                            break lab5;
                                        }
                                        // <-, line 48
                                        slice_from("I");
                                    } while (false);
                                    cursor = v_4;
                                    break golab4;
                                } while (false);
                                cursor = v_4;
                                if (cursor >= limit)
                                {
                                    break lab3;
                                }
                                cursor++;
                            }
                            continue replab2;
                        } while (false);
                        cursor = v_3;
                        break replab2;
                    }
                    return true;
                }

                private boolean r_mark_regions() {
            int v_1;
            int v_2;
            int v_3;
            int v_6;
            int v_8;
                    // (, line 52
                    I_pV = limit;
                    I_p1 = limit;
                    I_p2 = limit;
                    // do, line 58
                    v_1 = cursor;
                    lab0: do {
                        // (, line 58
                        // or, line 60
                        lab1: do {
                            v_2 = cursor;
                            lab2: do {
                                // (, line 59
                                if (!(in_grouping(g_v, 97, 249)))
                                {
                                    break lab2;
                                }
                                // or, line 59
                                lab3: do {
                                    v_3 = cursor;
                                    lab4: do {
                                        // (, line 59
                                        if (!(out_grouping(g_v, 97, 249)))
                                        {
                                            break lab4;
                                        }
                                        // gopast, line 59
                                        golab5: while(true)
                                        {
                                            lab6: do {
                                                if (!(in_grouping(g_v, 97, 249)))
                                                {
                                                    break lab6;
                                                }
                                                break golab5;
                                            } while (false);
                                            if (cursor >= limit)
                                            {
                                                break lab4;
                                            }
                                            cursor++;
                                        }
                                        break lab3;
                                    } while (false);
                                    cursor = v_3;
                                    // (, line 59
                                    if (!(in_grouping(g_v, 97, 249)))
                                    {
                                        break lab2;
                                    }
                                    // gopast, line 59
                                    golab7: while(true)
                                    {
                                        lab8: do {
                                            if (!(out_grouping(g_v, 97, 249)))
                                            {
                                                break lab8;
                                            }
                                            break golab7;
                                        } while (false);
                                        if (cursor >= limit)
                                        {
                                            break lab2;
                                        }
                                        cursor++;
                                    }
                                } while (false);
                                break lab1;
                            } while (false);
                            cursor = v_2;
                            // (, line 61
                            if (!(out_grouping(g_v, 97, 249)))
                            {
                                break lab0;
                            }
                            // or, line 61
                            lab9: do {
                                v_6 = cursor;
                                lab10: do {
                                    // (, line 61
                                    if (!(out_grouping(g_v, 97, 249)))
                                    {
                                        break lab10;
                                    }
                                    // gopast, line 61
                                    golab11: while(true)
                                    {
                                        lab12: do {
                                            if (!(in_grouping(g_v, 97, 249)))
                                            {
                                                break lab12;
                                            }
                                            break golab11;
                                        } while (false);
                                        if (cursor >= limit)
                                        {
                                            break lab10;
                                        }
                                        cursor++;
                                    }
                                    break lab9;
                                } while (false);
                                cursor = v_6;
                                // (, line 61
                                if (!(in_grouping(g_v, 97, 249)))
                                {
                                    break lab0;
                                }
                                // next, line 61
                                if (cursor >= limit)
                                {
                                    break lab0;
                                }
                                cursor++;
                            } while (false);
                        } while (false);
                        // setmark pV, line 62
                        I_pV = cursor;
                    } while (false);
                    cursor = v_1;
                    // do, line 64
                    v_8 = cursor;
                    lab13: do {
                        // (, line 64
                        // gopast, line 65
                        golab14: while(true)
                        {
                            lab15: do {
                                if (!(in_grouping(g_v, 97, 249)))
                                {
                                    break lab15;
                                }
                                break golab14;
                            } while (false);
                            if (cursor >= limit)
                            {
                                break lab13;
                            }
                            cursor++;
                        }
                        // gopast, line 65
                        golab16: while(true)
                        {
                            lab17: do {
                                if (!(out_grouping(g_v, 97, 249)))
                                {
                                    break lab17;
                                }
                                break golab16;
                            } while (false);
                            if (cursor >= limit)
                            {
                                break lab13;
                            }
                            cursor++;
                        }
                        // setmark p1, line 65
                        I_p1 = cursor;
                        // gopast, line 66
                        golab18: while(true)
                        {
                            lab19: do {
                                if (!(in_grouping(g_v, 97, 249)))
                                {
                                    break lab19;
                                }
                                break golab18;
                            } while (false);
                            if (cursor >= limit)
                            {
                                break lab13;
                            }
                            cursor++;
                        }
                        // gopast, line 66
                        golab20: while(true)
                        {
                            lab21: do {
                                if (!(out_grouping(g_v, 97, 249)))
                                {
                                    break lab21;
                                }
                                break golab20;
                            } while (false);
                            if (cursor >= limit)
                            {
                                break lab13;
                            }
                            cursor++;
                        }
                        // setmark p2, line 66
                        I_p2 = cursor;
                    } while (false);
                    cursor = v_8;
                    return true;
                }

                private boolean r_postlude() {
            int among_var;
            int v_1;
                    // repeat, line 70
                    replab0: while(true)
                    {
                        v_1 = cursor;
                        lab1: do {
                            // (, line 70
                            // [, line 72
                            bra = cursor;
                            // substring, line 72
                            among_var = find_among(a_1, 3);
                            if (among_var == 0)
                            {
                                break lab1;
                            }
                            // ], line 72
                            ket = cursor;
                            switch(among_var) {
                                case 0:
                                    break lab1;
                                case 1:
                                    // (, line 73
                                    // <-, line 73
                                    slice_from("i");
                                    break;
                                case 2:
                                    // (, line 74
                                    // <-, line 74
                                    slice_from("u");
                                    break;
                                case 3:
                                    // (, line 75
                                    // next, line 75
                                    if (cursor >= limit)
                                    {
                                        break lab1;
                                    }
                                    cursor++;
                                    break;
                            }
                            continue replab0;
                        } while (false);
                        cursor = v_1;
                        break replab0;
                    }
                    return true;
                }

                private boolean r_RV() {
                    if (!(I_pV <= cursor))
                    {
                        return false;
                    }
                    return true;
                }

                private boolean r_R1() {
                    if (!(I_p1 <= cursor))
                    {
                        return false;
                    }
                    return true;
                }

                private boolean r_R2() {
                    if (!(I_p2 <= cursor))
                    {
                        return false;
                    }
                    return true;
                }

                private boolean r_attached_pronoun() {
            int among_var;
                    // (, line 86
                    // [, line 87
                    ket = cursor;
                    // substring, line 87
                    if (find_among_b(a_2, 37) == 0)
                    {
                        return false;
                    }
                    // ], line 87
                    bra = cursor;
                    // among, line 97
                    among_var = find_among_b(a_3, 5);
                    if (among_var == 0)
                    {
                        return false;
                    }
                    // (, line 97
                    // call RV, line 97
                    if (!r_RV())
                    {
                        return false;
                    }
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 98
                            // delete, line 98
                            slice_del();
                            break;
                        case 2:
                            // (, line 99
                            // <-, line 99
                            slice_from("e");
                            break;
                    }
                    return true;
                }

                private boolean r_standard_suffix() {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
            int v_4;
                    // (, line 103
                    // [, line 104
                    ket = cursor;
                    // substring, line 104
                    among_var = find_among_b(a_6, 51);
                    if (among_var == 0)
                    {
                        return false;
                    }
                    // ], line 104
                    bra = cursor;
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 111
                            // call R2, line 111
                            if (!r_R2())
                            {
                                return false;
                            }
                            // delete, line 111
                            slice_del();
                            break;
                        case 2:
                            // (, line 113
                            // call R2, line 113
                            if (!r_R2())
                            {
                                return false;
                            }
                            // delete, line 113
                            slice_del();
                            // try, line 114
                            v_1 = limit - cursor;
                            lab0: do {
                                // (, line 114
                                // [, line 114
                                ket = cursor;
                                // literal, line 114
                                if (!(eq_s_b(2, "ic")))
                                {
                                    cursor = limit - v_1;
                                    break lab0;
                                }
                                // ], line 114
                                bra = cursor;
                                // call R2, line 114
                                if (!r_R2())
                                {
                                    cursor = limit - v_1;
                                    break lab0;
                                }
                                // delete, line 114
                                slice_del();
                            } while (false);
                            break;
                        case 3:
                            // (, line 117
                            // call R2, line 117
                            if (!r_R2())
                            {
                                return false;
                            }
                            // <-, line 117
                            slice_from("log");
                            break;
                        case 4:
                            // (, line 119
                            // call R2, line 119
                            if (!r_R2())
                            {
                                return false;
                            }
                            // <-, line 119
                            slice_from("u");
                            break;
                        case 5:
                            // (, line 121
                            // call R2, line 121
                            if (!r_R2())
                            {
                                return false;
                            }
                            // <-, line 121
                            slice_from("ente");
                            break;
                        case 6:
                            // (, line 123
                            // call RV, line 123
                            if (!r_RV())
                            {
                                return false;
                            }
                            // delete, line 123
                            slice_del();
                            break;
                        case 7:
                            // (, line 124
                            // call R1, line 125
                            if (!r_R1())
                            {
                                return false;
                            }
                            // delete, line 125
                            slice_del();
                            // try, line 126
                            v_2 = limit - cursor;
                            lab1: do {
                                // (, line 126
                                // [, line 127
                                ket = cursor;
                                // substring, line 127
                                among_var = find_among_b(a_4, 4);
                                if (among_var == 0)
                                {
                                    cursor = limit - v_2;
                                    break lab1;
                                }
                                // ], line 127
                                bra = cursor;
                                // call R2, line 127
                                if (!r_R2())
                                {
                                    cursor = limit - v_2;
                                    break lab1;
                                }
                                // delete, line 127
                                slice_del();
                                switch(among_var) {
                                    case 0:
                                        cursor = limit - v_2;
                                        break lab1;
                                    case 1:
                                        // (, line 128
                                        // [, line 128
                                        ket = cursor;
                                        // literal, line 128
                                        if (!(eq_s_b(2, "at")))
                                        {
                                            cursor = limit - v_2;
                                            break lab1;
                                        }
                                        // ], line 128
                                        bra = cursor;
                                        // call R2, line 128
                                        if (!r_R2())
                                        {
                                            cursor = limit - v_2;
                                            break lab1;
                                        }
                                        // delete, line 128
                                        slice_del();
                                        break;
                                }
                            } while (false);
                            break;
                        case 8:
                            // (, line 133
                            // call R2, line 134
                            if (!r_R2())
                            {
                                return false;
                            }
                            // delete, line 134
                            slice_del();
                            // try, line 135
                            v_3 = limit - cursor;
                            lab2: do {
                                // (, line 135
                                // [, line 136
                                ket = cursor;
                                // substring, line 136
                                among_var = find_among_b(a_5, 3);
                                if (among_var == 0)
                                {
                                    cursor = limit - v_3;
                                    break lab2;
                                }
                                // ], line 136
                                bra = cursor;
                                switch(among_var) {
                                    case 0:
                                        cursor = limit - v_3;
                                        break lab2;
                                    case 1:
                                        // (, line 137
                                        // call R2, line 137
                                        if (!r_R2())
                                        {
                                            cursor = limit - v_3;
                                            break lab2;
                                        }
                                        // delete, line 137
                                        slice_del();
                                        break;
                                }
                            } while (false);
                            break;
                        case 9:
                            // (, line 141
                            // call R2, line 142
                            if (!r_R2())
                            {
                                return false;
                            }
                            // delete, line 142
                            slice_del();
                            // try, line 143
                            v_4 = limit - cursor;
                            lab3: do {
                                // (, line 143
                                // [, line 143
                                ket = cursor;
                                // literal, line 143
                                if (!(eq_s_b(2, "at")))
                                {
                                    cursor = limit - v_4;
                                    break lab3;
                                }
                                // ], line 143
                                bra = cursor;
                                // call R2, line 143
                                if (!r_R2())
                                {
                                    cursor = limit - v_4;
                                    break lab3;
                                }
                                // delete, line 143
                                slice_del();
                                // [, line 143
                                ket = cursor;
                                // literal, line 143
                                if (!(eq_s_b(2, "ic")))
                                {
                                    cursor = limit - v_4;
                                    break lab3;
                                }
                                // ], line 143
                                bra = cursor;
                                // call R2, line 143
                                if (!r_R2())
                                {
                                    cursor = limit - v_4;
                                    break lab3;
                                }
                                // delete, line 143
                                slice_del();
                            } while (false);
                            break;
                    }
                    return true;
                }

                private boolean r_verb_suffix() {
            int among_var;
            int v_1;
            int v_2;
                    // setlimit, line 148
                    v_1 = limit - cursor;
                    // tomark, line 148
                    if (cursor < I_pV)
                    {
                        return false;
                    }
                    cursor = I_pV;
                    v_2 = limit_backward;
                    limit_backward = cursor;
                    cursor = limit - v_1;
                    // (, line 148
                    // [, line 149
                    ket = cursor;
                    // substring, line 149
                    among_var = find_among_b(a_7, 87);
                    if (among_var == 0)
                    {
                        limit_backward = v_2;
                        return false;
                    }
                    // ], line 149
                    bra = cursor;
                    switch(among_var) {
                        case 0:
                            limit_backward = v_2;
                            return false;
                        case 1:
                            // (, line 163
                            // delete, line 163
                            slice_del();
                            break;
                    }
                    limit_backward = v_2;
                    return true;
                }

                private boolean r_vowel_suffix() {
            int v_1;
            int v_2;
                    // (, line 170
                    // try, line 171
                    v_1 = limit - cursor;
                    lab0: do {
                        // (, line 171
                        // [, line 172
                        ket = cursor;
                        if (!(in_grouping_b(g_AEIO, 97, 242)))
                        {
                            cursor = limit - v_1;
                            break lab0;
                        }
                        // ], line 172
                        bra = cursor;
                        // call RV, line 172
                        if (!r_RV())
                        {
                            cursor = limit - v_1;
                            break lab0;
                        }
                        // delete, line 172
                        slice_del();
                        // [, line 173
                        ket = cursor;
                        // literal, line 173
                        if (!(eq_s_b(1, "i")))
                        {
                            cursor = limit - v_1;
                            break lab0;
                        }
                        // ], line 173
                        bra = cursor;
                        // call RV, line 173
                        if (!r_RV())
                        {
                            cursor = limit - v_1;
                            break lab0;
                        }
                        // delete, line 173
                        slice_del();
                    } while (false);
                    // try, line 175
                    v_2 = limit - cursor;
                    lab1: do {
                        // (, line 175
                        // [, line 176
                        ket = cursor;
                        // literal, line 176
                        if (!(eq_s_b(1, "h")))
                        {
                            cursor = limit - v_2;
                            break lab1;
                        }
                        // ], line 176
                        bra = cursor;
                        if (!(in_grouping_b(g_CG, 99, 103)))
                        {
                            cursor = limit - v_2;
                            break lab1;
                        }
                        // call RV, line 176
                        if (!r_RV())
                        {
                            cursor = limit - v_2;
                            break lab1;
                        }
                        // delete, line 176
                        slice_del();
                    } while (false);
                    return true;
                }

                public boolean stem() {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            int v_6;
            int v_7;
                    // (, line 181
                    // do, line 182
                    v_1 = cursor;
                    lab0: do {
                        // call prelude, line 182
                        if (!r_prelude())
                        {
                            break lab0;
                        }
                    } while (false);
                    cursor = v_1;
                    // do, line 183
                    v_2 = cursor;
                    lab1: do {
                        // call mark_regions, line 183
                        if (!r_mark_regions())
                        {
                            break lab1;
                        }
                    } while (false);
                    cursor = v_2;
                    // backwards, line 184
                    limit_backward = cursor; cursor = limit;
                    // (, line 184
                    // do, line 185
                    v_3 = limit - cursor;
                    lab2: do {
                        // call attached_pronoun, line 185
                        if (!r_attached_pronoun())
                        {
                            break lab2;
                        }
                    } while (false);
                    cursor = limit - v_3;
                    // do, line 186
                    v_4 = limit - cursor;
                    lab3: do {
                        // (, line 186
                        // or, line 186
                        lab4: do {
                            v_5 = limit - cursor;
                            lab5: do {
                                // call standard_suffix, line 186
                                if (!r_standard_suffix())
                                {
                                    break lab5;
                                }
                                break lab4;
                            } while (false);
                            cursor = limit - v_5;
                            // call verb_suffix, line 186
                            if (!r_verb_suffix())
                            {
                                break lab3;
                            }
                        } while (false);
                    } while (false);
                    cursor = limit - v_4;
                    // do, line 187
                    v_6 = limit - cursor;
                    lab6: do {
                        // call vowel_suffix, line 187
                        if (!r_vowel_suffix())
                        {
                            break lab6;
                        }
                    } while (false);
                    cursor = limit - v_6;
                    cursor = limit_backward;                    // do, line 189
                    v_7 = cursor;
                    lab7: do {
                        // call postlude, line 189
                        if (!r_postlude())
                        {
                            break lab7;
                        }
                    } while (false);
                    cursor = v_7;
                    return true;
                }

        public boolean equals( Object o ) {
            return o instanceof italianStemmer;
        }

        public int hashCode() {
            return italianStemmer.class.getName().hashCode();
        }



}

